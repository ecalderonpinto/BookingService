package com.entities.entity.reportingtool;

// Generated 11-feb-2015 17:15:14 by Hibernate Tools 4.0.0

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Version;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.entities.utilities.hibernate.VersionAuditor;
import com.entities.utilities.hibernate.VersionableAdapter;

/**
 * ReportExecution generated by hbm2java
 */
@Entity
@Table(name = "T_REPORT_GROUP")
public class ReportGroup implements VersionableAdapter {

	private static final long serialVersionUID = 2898270332999689372L;

	private long id;
	private String reportGroupName;
	private String reportGroupDesc;
	private String reportPeriodType;
	private String reportPeriodYear;
	private List<ReportExecution> reports = new ArrayList<ReportExecution>();

	@Embedded
	private VersionAuditor versionAuditor;
	@Version
	@Column(name = "VERSION", nullable = false)
	int version;

	public ReportGroup() {
	}

	public ReportGroup(String reportGroupName, String reportGroupDesc,
			String reportPeriodType, String reportPeriodYear) {
		this.reportGroupName = reportGroupName;
		this.reportGroupDesc = reportGroupDesc;
		this.reportPeriodType = reportPeriodType;
		this.reportPeriodYear = reportPeriodYear;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	// @SequenceGenerator(name = "GEN_REPORT_GROUP", sequenceName =
	// "SEQ_REPORT_GROUP", initialValue = 1, allocationSize = 1)
	// @GeneratedValue(strategy = GenerationType.SEQUENCE, generator =
	// "GEN_REPORT_GROUP")
	@Column(name = "REPORT_GROUP_ID", unique = true, nullable = false, length = 10)
	public long getId() {
		return this.id;
	}

	public void setId(long reportExecutionId) {
		this.id = reportExecutionId;
	}

	@Column(name = "REPORT_GROUP_NAME", nullable = false, length = 100)
	public String getReportGroupName() {
		return this.reportGroupName;
	}

	public void setReportGroupName(String reportGroupName) {
		this.reportGroupName = reportGroupName;
	}

	@Column(name = "REPORT_GROUP_DESC")
	public String getReportGroupDesc() {
		return this.reportGroupDesc;
	}

	public void setReportGroupDesc(String reportGroupDesc) {
		this.reportGroupDesc = reportGroupDesc;
	}

	@Column(name = "REPORT_PERIOD_TYPE", nullable = false, length = 10)
	public String getReportPeriodType() {
		return this.reportPeriodType;
	}

	public void setReportPeriodType(String reportPeriodType) {
		this.reportPeriodType = reportPeriodType;
	}

	@Column(name = "REPORT_PERIOD_YEAR", nullable = false, length = 4)
	public String getReportPeriodYear() {
		return this.reportPeriodYear;
	}

	public void setReportPeriodYear(String reportPeriodYear) {
		this.reportPeriodYear = reportPeriodYear;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "reportGroup")
	@Cascade({ CascadeType.SAVE_UPDATE })
	public List<ReportExecution> getReports() {
		return this.reports;
	}

	public void setReports(List<ReportExecution> reports) {
		this.reports = reports;
	}

	public int getVersion() {
		return version;
	}

	public void setVersion(int version) {
		this.version = version;
	}

	@Override
	public Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	public VersionAuditor getVersionAuditor() {
		return versionAuditor;
	}

	public void setVersionAuditor(VersionAuditor _auditor) {
		this.versionAuditor = _auditor;
	}

	@Override
	public boolean equals(Object object) {
		if (object instanceof ReportGroup) {
			return ((ReportGroup) object).getReportGroupName().equals(
					this.getReportGroupName())
					&& ((ReportGroup) object).getReportGroupDesc().equals(
							this.getReportGroupDesc())
					&& ((ReportGroup) object).getReportPeriodType().equals(
							this.getReportPeriodType())
					&& ((ReportGroup) object).getReportPeriodYear().equals(
							this.getReportPeriodYear());
		}
		return false;
	}

}
